// Generated by CoffeeScript 1.9.3
(function() {
  var EightQueens, q;

  EightQueens = (function() {
    function EightQueens() {
      var i, j;
      this.placementHistory = [];
      this.grid = (function() {
        var k, results;
        results = [];
        for (j = k = 1; k <= 8; j = ++k) {
          results.push((function() {
            var l, results1;
            results1 = [];
            for (i = l = 1; l <= 8; i = ++l) {
              results1.push(false);
            }
            return results1;
          })());
        }
        return results;
      })();
    }

    EightQueens.prototype.print = function() {
      var k, l, len, len1, line, ref, row, square;
      ref = this.grid;
      for (k = 0, len = ref.length; k < len; k++) {
        row = ref[k];
        line = "";
        for (l = 0, len1 = row.length; l < len1; l++) {
          square = row[l];
          line += (square ? "Q" : ".");
        }
        console.log(line);
      }
      return console.log("");
    };

    EightQueens.prototype.placeQueen = function(r, c) {
      if (!this.isValidPlacement(r, c)) {
        return false;
      }
      this.placementHistory.push([r, c]);
      this.grid[r][c] = true;
      return true;
    };

    EightQueens.prototype.removeLastQueen = function(r, c) {
      var ref;
      if (this.placementHistory.length === 0) {
        return false;
      }
      ref = this.placementHistory.pop(), r = ref[0], c = ref[1];
      this.grid[r][c] = false;
      return true;
    };

    EightQueens.prototype.isValidPlacement = function(r, c) {
      var c2, k, len, r2, ref, ref1;
      ref = this.placementHistory;
      for (k = 0, len = ref.length; k < len; k++) {
        ref1 = ref[k], r2 = ref1[0], c2 = ref1[1];
        if (r === r2 || c === c2 || (r2 - r) === (c2 - c) || (r2 - r) === -(c2 - c)) {
          return false;
        }
      }
      return true;
    };

    EightQueens.prototype.placeAllQueens = function(arg) {
      var k, nextColumn, nextRow, previousRow, random, ref, ref1;
      random = (arg != null ? arg : {}).random;
      if (this.placementHistory.length === 0) {
        previousRow = -1;
      } else {
        ref = this.placementHistory, (ref1 = ref[ref.length - 1], previousRow = ref1[0]);
      }
      console.log(previousRow);
      console.log(this.grid);
      nextRow = previousRow + 1;
      if (nextRow >= 8) {
        return true;
      }
      for (nextColumn = k = 0; k < 8; nextColumn = ++k) {
        if (this.placeQueen(nextRow, nextColumn)) {
          if (this.placeAllQueens()) {
            return true;
          }
        }
      }
      console.log("Something went horribly wrong! We didn't find any solutions.");
      this.removeLastQueen();
      return false;
    };

    return EightQueens;

  })();

  q = new EightQueens;

  q.placeAllQueens({
    random: true
  });

  q.print();

}).call(this);
